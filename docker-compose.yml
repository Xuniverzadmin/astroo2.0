services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file: config.env
    environment:
      PYTHONUNBUFFERED: "1"
      # Build the URL from env vars (quoted is safer due to colons)
      DATABASE_URL: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      # fallbacks prevent WARN lines when running locally without all keys
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["https://astrooverz.com","https://www.astrooverz.com","http://localhost:5173"]}
      LLM_API_KEY: ${OPENAI_API_KEY:-}
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    command: >
      uvicorn numerology_app.main:app --host 0.0.0.0 --port 8000
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks: [web]

  frontend:
    build:
      context: .
      dockerfile: frontend/dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://backend:8000}
    restart: unless-stopped
    networks: [web]

  caddy:
    image: caddy:2
    ports: ["80:80", "443:443"]
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddydata:/data
      - caddyconfig:/config
    depends_on: [backend, frontend]
    restart: unless-stopped
    networks: [web]

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-astrooverz}
      POSTGRES_USER: ${POSTGRES_USER:-astrooverz}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-astrooverz123}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-astrooverz} -d ${POSTGRES_DB:-astrooverz}"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks: [web]

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks: [web]

  # Optional: DB UI
  pgadmin:
    image: dpage/pgadmin4:8
    env_file: config.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@astrooverz.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "8082:80"
    depends_on: [db]
    restart: unless-stopped
    networks: [web]

  # Optional prerender service. Use a profile so it won't pull unless you ask for it.
  prerender:
    image: prerender/prerender:latest
    restart: unless-stopped
    environment:
      - PRERENDER_NUM_WORKERS=2
      - PRERENDER_PAGE_DONE_CHECK_TIMEOUT=12000
      - PRERENDER_JS_TIMEOUT=20000
    networks: [web]
    profiles: ["prerender"]

volumes:
  caddydata:
  caddyconfig:
  pgdata:
  redisdata:

networks:
  web: {}
