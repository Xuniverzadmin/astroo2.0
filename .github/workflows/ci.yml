name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Tests and Build
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      working-directory: ./backend
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379"
        export SCHED_ENABLED=false
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "SCHED_ENABLED=false" >> .env

    - name: Run backend tests
      working-directory: ./backend
      run: |
        python run_tests.py all
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SCHED_ENABLED: false

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/ --cov=numerology_app --cov-report=xml --cov-report=term-missing --cov-fail-under=70
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SCHED_ENABLED: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured yet"

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test || echo "Tests not configured yet"

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Docker Build and Push
  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Caddy image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Caddyfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/caddy:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        DATABASE_URL=postgresql://postgres:postgres@db:5432/astrooverz
        REDIS_URL=redis://redis:6379
        SCHED_ENABLED=false
        AYANAMSA=Lahiri
        MONTH_SYSTEM=Amanta
        DAY_BOUNDARY=sunrise
        EOF

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d --build
        sleep 30  # Wait for services to be ready

    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'

    - name: Run integration tests
      run: |
        docker-compose exec -T backend python run_tests.py integration

    - name: Test health endpoints
      run: |
        curl -f http://localhost:8000/healthz || exit 1
        curl -f http://localhost:8000/api/healthz || exit 1

    - name: Test panchangam API
      run: |
        curl -f "http://localhost:8000/api/panchangam/2024-03-15?lat=13.0827&lon=80.2707&tz=Asia/Kolkata" || exit 1

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Create performance test script
      run: |
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '2m', target: 10 }, // Ramp up to 10 users
            { duration: '5m', target: 10 }, // Stay at 10 users
            { duration: '2m', target: 0 },  // Ramp down to 0 users
          ],
        };

        export default function () {
          // Test health endpoint
          let healthResponse = http.get('http://localhost:8000/healthz');
          check(healthResponse, {
            'health endpoint status is 200': (r) => r.status === 200,
            'health endpoint response time < 1s': (r) => r.timings.duration < 1000,
          });

          // Test panchangam endpoint
          let panchangamResponse = http.get('http://localhost:8000/api/panchangam/2024-03-15?lat=13.0827&lon=80.2707&tz=Asia/Kolkata');
          check(panchangamResponse, {
            'panchangam endpoint status is 200': (r) => r.status === 200,
            'panchangam endpoint response time < 5s': (r) => r.timings.duration < 5000,
          });

          sleep(1);
        }
        EOF

    - name: Run performance tests
      run: |
        k6 run performance-test.js

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, security-scan, integration-test, performance-test]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI/CD pipeline steps completed successfully!"
        echo "🚀 Application is ready for deployment"

    - name: Notify failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Backend tests: ${{ needs.backend-test.result }}"
        echo "Frontend tests: ${{ needs.frontend-test.result }}"
        echo "Docker build: ${{ needs.docker-build.result }}"
        exit 1
