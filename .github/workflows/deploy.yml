name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify CI pipeline passed
      run: |
        echo "✅ CI pipeline must pass before deployment"
        echo "This job ensures all tests and builds are successful"

    - name: Check branch protection
      run: |
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          echo "❌ Deployment only allowed from main branch"
          exit 1
        fi
        echo "✅ Deploying from main branch"

    - name: Verify required secrets
      run: |
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "❌ VPS_HOST secret is required"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_USER }}" ]; then
          echo "❌ VPS_USER secret is required"
          exit 1
        fi
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "❌ VPS_SSH_KEY secret is required"
          exit 1
        fi
        echo "✅ All required secrets are present"

  # Deploy to VPS
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory on VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          mkdir -p /opt/astrooverz
          cd /opt/astrooverz
          if [ ! -d '.git' ]; then
            git clone https://github.com/${{ github.repository }}.git .
          fi
        "

    - name: Update code on VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          git fetch origin
          git reset --hard origin/main
          git clean -fd
        "

    - name: Create production environment file
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          cat > .env << 'EOF'
        # Production Environment Configuration
        DATABASE_URL=postgresql://astrooverz:astrooverz123@db:5432/astrooverz
        REDIS_URL=redis://redis:6379
        
        # Panchangam Configuration
        AYANAMSA=Lahiri
        MONTH_SYSTEM=Amanta
        DAY_BOUNDARY=sunrise
        
        # Job Scheduling Configuration
        SCHED_ENABLED=true
        CITY_PRECOMPUTE=IN_TOP200
        PRECOMPUTE_DAYS=30
        PRECOMPUTE_TIME=02:30
        
        # API Configuration
        API_V1_STR=/api
        PROJECT_NAME=Astrooverz Numerology API
        
        # CORS Configuration
        BACKEND_CORS_ORIGINS=[\"*\"]
        
        # Default Timezone
        DEFAULT_TZ=Asia/Kolkata
        EOF
        "

    - name: Create docker-compose override for production
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          cat > docker-compose.prod.yml << 'EOF'
        version: '3.8'
        
        services:
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            restart: unless-stopped
            environment:
              - SCHED_ENABLED=true
              - CITY_PRECOMPUTE=IN_TOP200
              - PRECOMPUTE_DAYS=30
              - PRECOMPUTE_TIME=02:30
            healthcheck:
              test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/healthz\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            restart: unless-stopped
            healthcheck:
              test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5173\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          caddy:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/caddy:latest
            restart: unless-stopped
            ports:
              - \"80:80\"
              - \"443:443\"
            volumes:
              - caddy_data:/data
              - caddy_config:/config
            healthcheck:
              test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:2019/config/\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          db:
            restart: unless-stopped
            environment:
              - POSTGRES_DB=astrooverz
              - POSTGRES_USER=astrooverz
              - POSTGRES_PASSWORD=astrooverz123
            volumes:
              - pgdata:/var/lib/postgresql/data
            healthcheck:
              test: [\"CMD-SHELL\", \"pg_isready -U astrooverz -d astrooverz\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
          redis:
            restart: unless-stopped
            command: redis-server --appendonly yes
            volumes:
              - redisdata:/data
            healthcheck:
              test: [\"CMD\", \"redis-cli\", \"ping\"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 40s
        
        volumes:
          pgdata:
          redisdata:
          caddy_data:
          caddy_config:
        
        networks:
          web:
            driver: bridge
        EOF
        "

    - name: Login to GitHub Container Registry
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        "

    - name: Pull latest images
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
        "

    - name: Stop existing services
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans || true
        "

    - name: Start services
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --remove-orphans
        "

    - name: Wait for services to be healthy
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          echo 'Waiting for services to be healthy...'
          timeout 300 bash -c 'until docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps | grep -q \"healthy\"; do sleep 10; done'
          echo 'All services are healthy!'
        "

    - name: Verify deployment
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          
          # Check if all containers are running
          echo 'Checking container status...'
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
          
          # Test health endpoints
          echo 'Testing health endpoints...'
          sleep 10  # Wait a bit more for services to be fully ready
          
          # Test backend health
          if curl -f http://localhost:8000/healthz; then
            echo '✅ Backend health check passed'
          else
            echo '❌ Backend health check failed'
            exit 1
          fi
          
          # Test API health
          if curl -f http://localhost:8000/api/healthz; then
            echo '✅ API health check passed'
          else
            echo '❌ API health check failed'
            exit 1
          fi
          
          # Test panchangam API
          if curl -f 'http://localhost:8000/api/panchangam/2024-03-15?lat=13.0827&lon=80.2707&tz=Asia/Kolkata'; then
            echo '✅ Panchangam API test passed'
          else
            echo '❌ Panchangam API test failed'
            exit 1
          fi
        "

    - name: Clean up old images
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          # Remove unused images to save space
          docker image prune -f
          docker system prune -f
        "

    - name: Logout from GitHub Container Registry
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          docker logout ${{ env.REGISTRY }}
        "

  # Post-deployment monitoring
  post-deploy-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Check service status
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          echo '=== Service Status ==='
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
          
          echo '=== Resource Usage ==='
          docker stats --no-stream
          
          echo '=== Disk Usage ==='
          df -h
          
          echo '=== Memory Usage ==='
          free -h
        "

    - name: Test external access
      run: |
        # Test if the application is accessible from outside
        if curl -f http://${{ secrets.VPS_HOST }}/healthz; then
          echo '✅ External health check passed'
        else
          echo '❌ External health check failed'
          exit 1
        fi

    - name: Deployment success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application is now live at: http://${{ secrets.VPS_HOST }}"
        echo "📊 Health check: http://${{ secrets.VPS_HOST }}/healthz"
        echo "🔧 API health: http://${{ secrets.VPS_HOST }}/api/healthz"

    - name: Deployment failure notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and try again."
        exit 1

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Rollback to previous version
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          
          echo 'Stopping current services...'
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
          
          echo 'Rolling back to previous version...'
          git log --oneline -5
          echo 'Please specify the commit hash to rollback to:'
          # In a real scenario, you might want to implement a more sophisticated rollback mechanism
          
          echo 'Starting services with previous version...'
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
        "

    - name: Verify rollback
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
          cd /opt/astrooverz
          sleep 30
          
          if curl -f http://localhost:8000/healthz; then
            echo '✅ Rollback successful - services are healthy'
          else
            echo '❌ Rollback failed - services are not healthy'
            exit 1
          fi
        "
